const jwt = require('jsonwebtoken');
const User = require('../models/User'); // mô hình người dùng

// Đoạn mã cho phép đăng nhập
router.post('/login', async (req, res) => {
    // Kiểm tra thông tin đăng nhập và tạo JWT
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(401).json({ message: 'Thất bại khi đăng nhập' });
    }
    const token = jwt.sign({ id: user._id, role: user.role }, process.env.SECRET);
    res.cookie('token', token, {
        httpOnly: true, // Ngăn chặn việc truy cập cookie từ phía client
        secure: true, // Nếu bạn sử dụng HTTPS
        expires: new Date(Date.now() + 900000) // Thời gian sống của cookie
    });
    res.json({ message: 'Đăng nhập thành công' });
});
const jwt = require('jsonwebtoken');

const express = require('express');
const Product = require('../models/Product'); // mô hình sản phẩm
const authMiddleware = require('../middlewares/auth');

const router = express.Router();

router.post('/product', authMiddleware, async (req, res) => {
    const { name, price } = req.body;
    // Kiểm tra rằng người dùng có vai trò 'admin' hay không
    if (req.user.role !== 'admin') {
        return res.status(403).json({ message: 'Không đủ quyền để tạo sản phẩm' });
    }
    const newProduct = new Product({ name, price });
    await newProduct.save();
    res.status(201).json(newProduct);
});

origin:[ 'http://localhost:5173','http://localhost:5174']
const authMiddleware = (req, res, next) => {
    const token = req.cookies.token; // lấy token từ cookie
    if (!token) {
        return res.status(403).json({ message: 'Không có quyền truy cập' });
    }
    jwt.verify(token, process.env.SECRET, (err, decoded) => {
        if (err) {
            return res.status(401).json({ message: 'Token không hợp lệ' });
        }
        req.user = decoded; // lưu thông tin người dùng đã xác thực
        next();
    });
};